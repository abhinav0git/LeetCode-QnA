/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode left*;
 *     TreeNode right*;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector <int> ans;
    void inorderRec(TreeNode* root) {
        
        if(!root)                    //if the root is empty return
            return;
        
        if(root->left)     //inorder traversal include traversal of left subtree than root than right subtree 
        {
         inorderTraversal(root->left);   
        }
        
        ans.push_back(root->val);     //inserting the root element
        
        if(root->right)                 //left - root - right
        {
            inorderTraversal(root->right);
        }
    }
    
    vector <int> inorderTraversal(TreeNode* root)  //to call recursion function
    {
        inorderRec(root);
        return ans;
    }
};
